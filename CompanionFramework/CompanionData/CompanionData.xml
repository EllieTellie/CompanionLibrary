<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CompanionData</name>
    </assembly>
    <members>
        <member name="F:Companion.Data.Catalogue.path">
            <summary>
            Path this was read from (if available).
            </summary>
        </member>
        <member name="M:Companion.Data.StringExtensions.Trim(System.String[])">
            <summary>
            Trim all the whitespace from the strings in this array.
            </summary>
            <param name="arr">Array</param>
        </member>
        <member name="F:Companion.Data.GameSystem.path">
            <summary>
            Path this was read from (if available).
            </summary>
        </member>
        <member name="F:Companion.Data.SelectionEntry.parent">
            <summary>
            Parent selection if available.
            </summary>
        </member>
        <member name="M:Companion.Data.Roster.HasValidCosts">
            <summary>
            Checks if any costs have a value larger than zero.
            </summary>
            <returns>True if it has valid costs</returns>
        </member>
        <member name="F:Companion.Data.Selection.parent">
            <summary>
            Parent selection if available.
            </summary>
        </member>
        <member name="F:Companion.Data.XmlData.comment">
            <summary>
            Optional comment for data.
            </summary>
        </member>
        <member name="F:Companion.Data.XmlData.xmlns">
            <summary>
            Optional xml schema.
            </summary>
        </member>
        <member name="F:Companion.Data.XmlData.rootContainer">
            <summary>
            Optional root container.
            </summary>
        </member>
        <member name="F:Companion.Data.XmlData.fields">
            <summary>
            List of xml lists containing all the nodes after parsing.
            </summary>
        </member>
        <member name="M:Companion.Data.XmlData.InitFields">
            <summary>
            Init the fields usually lists to a new empty list. By default does nothing.
            </summary>
        </member>
        <member name="M:Companion.Data.XmlData.SetRootContainer(Companion.Data.IRootContainer)">
            <summary>
            Set the root container.
            </summary>
            <param name="rootContainer">Root container</param>
        </member>
        <member name="T:Companion.Data.GameSystemGroup">
            <summary>
            Group of catalogues and systems used in a roster. Mostly for roster detection speed.
            </summary>
        </member>
        <member name="M:Companion.Data.GameSystemGroup.CreateGuid">
            <summary>
            Creates a new guid that is unique for this game system and catalogues.
            </summary>
            <returns>New guid</returns>
        </member>
        <member name="T:Companion.Data.GameSystemLoading">
            <summary>
            Track loading the game system.
            </summary>
        </member>
        <member name="F:Companion.Data.GameSystemLoading.eventLock">
            <summary>
            Lock for event firing
            </summary>
        </member>
        <member name="E:Companion.Data.GameSystemLoading.OnProgressUpdate">
            <summary>
            Fired when progress update is due. This is on the main thread if <see cref="T:CompanionFramework.Core.Threading.Messaging.MessageQueue"/> is supported.
            </summary>
        </member>
        <member name="E:Companion.Data.GameSystemLoading.OnLoadingCompleted">
            <summary>
            Fired when completed. Source is this.
            </summary>
        </member>
        <member name="E:Companion.Data.GameSystemLoading.OnLoadingFailed">
            <summary>
            Fired when failed. Source is this.
            </summary>
        </member>
        <member name="M:Companion.Data.GameSystemLoading.GetGameSystemGroup">
            <summary>
            Get the game system group. This never returns null. If this has failed game system or catalogues may not be populated.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Companion.Data.RosterReader.OnRosterParsed">
            <summary>
            Dispatched on the main unity thread. Source is roster. EventArgs is null.
            </summary>
        </member>
        <member name="M:Companion.Data.RosterReader.Parse(Companion.Data.GameSystem)">
            <summary>
            Attempt to parse the roster and detect the selections. If no <see cref="T:Companion.Data.GameSystem"/> is provided we attempt to detect the game system.
            </summary>
            <param name="gameSystem">Game system, optional</param>
            <returns>Roster or null if unable to parse</returns>
        </member>
        <member name="T:Companion.Data.WordReader">
            <summary>
            Simple reader that reads words. 
            </summary>
        </member>
        <member name="T:Companion.Data.RepositoryUpdate">
            <summary>
            Track updating the repository.
            </summary>
        </member>
        <member name="E:Companion.Data.RepositoryUpdate.OnDownloadUpdate">
            <summary>
            Fired when a download reports progress. This is most likely fired on whatever thread this is called from
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.CoreUpdateProcess.LoadingComplete">
            <summary>
            Fired when the process completed.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.CoreUpdateProcess.LoadingAborted">
            <summary>
            Fired when the process is aborted.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Execute(Companion.Data.System.Update.RepositoryData)">
            <summary>
            Execute the update process and passes any state through.
            </summary>
            <param name="state">current state</param>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.GetState">
            <summary>
            The update state this process handles.
            </summary>
            <returns>update state</returns>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Abort">
            <summary>
            Aborts the process. Fires the abort event.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Abort(Companion.Data.System.Update.UpdateError,System.String)">
            <summary>
            Aborts the process. Fires the abort event.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Complete">
            <summary>
            Complete the process. Fires the complete event.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Complete(System.Object)">
            <summary>
            Complete the process. Fires the complete event.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Cleanup">
            <summary>
            Cleanup. Fired from Abort() and Complete(). By default does nothing.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.GetMaxRetries">
            <summary>
            How many times it should retry. By default it does not.
            </summary>
            <returns>Maximum retries</returns>
        </member>
        <member name="M:Companion.Data.System.Update.CoreUpdateProcess.Retry(Companion.Data.System.Update.RepositoryData)">
            <summary>
            Retry the operation.
            </summary>
            <param name="state">State</param>
        </member>
        <member name="M:Companion.Data.System.Update.DataIndexVersionInfo.GetVersionInfo(System.Byte[],System.String,System.String)">
            <summary>
            Get the version information from the compressed data file on disk.
            </summary>
            <param name="data">Byte data</param>
            <param name="fileExtension">The extension of the compressed file starting with a period</param>
            <param name="elementName">The name of the first element in the xml file that needs to match</param>
            <returns>Version information</returns>
        </member>
        <member name="M:Companion.Data.System.Update.DataIndexVersionInfo.GetGameSystemVersionInfo(System.String)">
            <summary>
            Helper method to get version information from the compressed file. Get the version information from the compressed data file on disk.
            </summary>
            <param name="path">Path of the compressed game system</param>
            <returns>Version information</returns>
        </member>
        <member name="T:Companion.Data.System.Update.Repository">
            <summary>
            Holds the repository information retrieved 
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.Repository.#ctor(LitJson.JsonData)">
            <summary>
            Create a repository from the json provided.
            </summary>
            <param name="jsonData">Json data</param>
        </member>
        <member name="M:Companion.Data.System.Update.Repository.Write(LitJson.JsonWriter)">
            <summary>
            Write this object out as a json object.
            </summary>
            <param name="writer">Json Writer to use</param>
        </member>
        <member name="T:Companion.Data.System.Update.GameSystemData">
            <summary>
            Storing the linked data as a data index always needs a repository.
            </summary>
        </member>
        <member name="T:Companion.Data.System.Update.RepositoryData">
            <summary>
            Class to hold repository data as it gets loaded.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.RepositoryData.url">
            <summary>
            The url to read the repository index from.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.RepositoryData.repositoryIndex">
            <summary>
            Repository index if loaded, can be null if not loaded.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.RepositoryData.dataIndices">
            <summary>
            Data index if loaded, can be null if not loaded. Repository Index must be loaded before this can be loaded.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.RepositoryData.OnDataIndexAdded">
            <summary>
            Fired when data index is received from a repository. Source is <see cref="T:Companion.Data.System.Update.RepositoryData"/>. EventArgs is <see cref="T:Companion.Data.System.Update.DataIndexSuccessEventArgs"/>.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.RepositoryData.OnDataIndexFailed">
            <summary>
            Fired when it failed to receive the data index from a repository. Source is <see cref="T:Companion.Data.System.Update.RepositoryData"/>. EventArgs is <see cref="T:Companion.Data.System.Update.ProcessFailedEventArgs"/>.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.RepositoryData.OnRepositoryIndexAdded">
            <summary>
            Fired when repository index is received. Source is <see cref="T:Companion.Data.System.Update.RepositoryData"/>. EventArgs is <see cref="T:Companion.Data.System.Update.RepositoryIndexSuccessEventArgs"/>.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.RepositoryData.OnRepositoryIndexFailed">
            <summary>
            Fired when it failed to receive the repository index. Source is <see cref="T:Companion.Data.System.Update.RepositoryData"/>. EventArgs is <see cref="T:Companion.Data.System.Update.ProcessFailedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.RepositoryData.AddGameSystem(Companion.Data.System.Update.Repository,Companion.Data.DataIndex)">
            <summary>
            Add Game System with <see cref="T:Companion.Data.DataIndex"/>.
            </summary>
            <param name="repository">Repository</param>
            <param name="dataIndex">Data index</param>
            <returns>Game System Data</returns>
        </member>
        <member name="M:Companion.Data.System.Update.RepositoryData.GetGameSystem(Companion.Data.System.Update.Repository)">
            <summary>
            Get the game system data for this repository if it's present. If it's not loaded returns null.
            </summary>
            <param name="repository">Repository to get the data from</param>
            <returns>Game system data</returns>
        </member>
        <member name="M:Companion.Data.System.Update.RepositoryData.GetDataIndex(Companion.Data.System.Update.Repository)">
            <summary>
            Get the data index by the repository. This is short for GetGameSystem(repository).dataIndex.
            </summary>
            <param name="repository">Repository</param>
            <returns>Data index</returns>
        </member>
        <member name="T:Companion.Data.System.Update.ProcessEventArgs">
            <summary>
            Base class for arguments by all process events
            </summary>
        </member>
        <member name="T:Companion.Data.System.Update.IUpdateProcess">
            <summary>
            Handles updating the data files.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.IUpdateProcess.LoadingComplete">
            <summary>
            Fired when the process completed.
            </summary>
        </member>
        <member name="E:Companion.Data.System.Update.IUpdateProcess.LoadingAborted">
            <summary>
            Fired when the process is aborted.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.IUpdateProcess.Execute(Companion.Data.System.Update.RepositoryData)">
            <summary>
            Execute the update process and passes any state through.
            </summary>
            <param name="state">current state</param>
        </member>
        <member name="M:Companion.Data.System.Update.IUpdateProcess.Abort">
            <summary>
            Aborts the process.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.IUpdateProcess.GetState">
            <summary>
            The update state this process handles.
            </summary>
            <returns>update state</returns>
        </member>
        <member name="T:Companion.Data.System.Update.RetrieveDataIndexProcess">
            <summary>
            Retrieve the data index from the repository index. This reads the .bsi file (battle scribe index/zipped xml) from the repository index url and create a <see cref="T:Companion.Data.DataIndex"/> from it.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveDataIndexProcess.#ctor(Companion.Data.System.Update.Repository,System.Boolean)">
            <summary>
            Creates a process to retrieve the data index from the repository index.
            </summary>
            <param name="repository">Repository to get index url from</param>
            <param name="async">If true the networking will be asynchronous</param>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveDataIndexProcess.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a process to retrieve the data index from the repository index.
            </summary>
            <param name="url">Repository index url</param>
            <param name="async">If true the networking will be asynchronous</param>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveDataIndexProcess.Execute(Companion.Data.System.Update.RepositoryData)">
            <inheritdoc/>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveDataIndexProcess.GetState">
            <inheritdoc/>
        </member>
        <member name="T:Companion.Data.System.Update.RetrieveRepositoryIndexProcess">
            <summary>
            Retrieves the index of game systems from the repository url. This reads the json from the repository and creates a <see cref="T:Companion.Data.System.Update.RepositoryIndex"/> from it.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveRepositoryIndexProcess.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a process to retrieve the index of game systems.
            </summary>
            <param name="url">Repository url</param>
            <param name="async">If true the networking will be asynchronous</param>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveRepositoryIndexProcess.Execute(Companion.Data.System.Update.RepositoryData)">
            <inheritdoc/>
        </member>
        <member name="M:Companion.Data.System.Update.RetrieveRepositoryIndexProcess.GetState">
            <inheritdoc/>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.Error">
            <summary>
            Default generic error.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.MissingState">
            <summary>
            No state was not provided to the process (null).
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.InvalidParameter">
            <summary>
            Invalid parameter passed to the process.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.FailedNetworkResponse">
            <summary>
            We failed to get a valid network response.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.InvalidRepositoryIndex">
            <summary>
            Repository index data from the network was invalid.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.InvalidDataIndex">
            <summary>
            Data index from the network was invalid.
            </summary>
        </member>
        <member name="F:Companion.Data.System.Update.UpdateError.FailedFileAccess">
            <summary>
            Unable to access files.
            </summary>
        </member>
        <member name="T:Companion.Data.System.Update.UpdateGameSystemProcess">
            <summary>
            Updates a game system from a repository. It will check which files need updating in the data index and download those files only.
            </summary>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.#ctor(Companion.Data.System.Update.Repository,Companion.Data.DataIndex,System.String,System.Boolean)">
            <summary>
            Create a new update system process.
            </summary>
            <param name="repository">Repository to update from</param>
            <param name="dataIndex">Data index retrieved from repository</param>
            <param name="dataPath">File path where the data should reside</param>
            <param name="async">Whether to update async</param>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.Execute(Companion.Data.System.Update.RepositoryData)">
            <inheritdoc/>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.GetUpdateDataIndices">
            <summary>
            Get a list of the catalogues and game systems from the data index that need updating.
            </summary>
            <returns>List of data index entries that require updating</returns>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.RequiresUpdate(Companion.Data.DataIndexEntry)">
            <summary>
            Checks whether the file exists and if it does whether it has an up to date version. If the file is not readable it will also return true.
            </summary>
            <param name="entry">Entry</param>
            <returns>Returns true if it requires updating</returns>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.GetState">
            <inheritdoc/>
        </member>
        <member name="M:Companion.Data.System.Update.UpdateGameSystemProcess.SetRepositoryUpdate(Companion.Data.RepositoryUpdate)">
            <summary>
            Optionally store the repository update for keeping track of progress during the update process.
            </summary>
            <param name="repositoryUpdate">Repository update</param>
        </member>
        <member name="T:Companion.Data.Utils.XmlDataFactory">
            <summary>
            Speed up xml serialization by creating the constructors manually.
            </summary>
        </member>
        <member name="M:Companion.Data.Utils.XmlDataFactory.Create``1(System.Xml.XmlNode)">
            <summary>
            Create a new xml data class of the type specified. This will attempt to use an existing constructor if defined or use reflection last.
            </summary>
            <typeparam name="T">Type to create</typeparam>
            <param name="node">Node to pass into constructor</param>
            <returns>New XmlData class</returns>
        </member>
        <member name="E:RosterManager.OnRostersLoaded">
            <summary>
            Fired when all rosters are loaded.
            </summary>
        </member>
        <member name="E:RosterManager.OnRostersAdded">
            <summary>
            Fired whenever a roster is added.
            </summary>
        </member>
        <member name="M:RosterManager.AddRoster(System.Byte[])">
            <summary>
            Parse the roster and add it to the roster manager.
            </summary>
            <param name="data">Roster data</param>
        </member>
        <member name="T:SystemManager">
            <summary>
            System Manager is used to store game systems and catalogues.
            </summary>
        </member>
        <member name="E:SystemManager.OnGameSystemsLoaded">
            <summary>
            Dispatched on the main thread. Source is this. EventArgs is null.
            </summary>
        </member>
        <member name="E:SystemManager.OnActiveGameSystemChanged">
            <summary>
            Dispatched on the main thread. Source is this. EventArgs is null.
            </summary>
        </member>
        <member name="P:SystemManager.Instance">
            <summary>
            Get the global system manager. If no system manager is available this call creates a new one.
            </summary>
        </member>
        <member name="M:SystemManager.SetActiveGameSystem(Companion.Data.GameSystem)">
            <summary>
            Store the active game system if the system only supports one active one.
            </summary>
        </member>
        <member name="M:SystemManager.GetActiveGameSystem">
            <summary>
            Get the active game system.
            </summary>
            <returns>Return active game system</returns>
        </member>
        <member name="M:SystemManager.LoadActiveGameSystemAsync(System.String)">
            <summary>
            Load the game system using the ThreadPool and make it active async. This returns the loading class or null if already loading.
            </summary>
            <param name="path">Path of game system to load</param>
            <returns>Returns GameSystemLoading if this call started loading</returns>
        </member>
        <member name="M:SystemManager.LoadGameSystemsAsync(System.String)">
            <summary>
            Load all game systems at this path using the ThreadPool. Use <see cref="E:SystemManager.OnGameSystemsLoaded"/> for the callback. The callback is on the main thread if the <see cref="T:CompanionFramework.Core.Threading.Messaging.MessageQueue"/> is used otherwise it is not.
            </summary>
            <param name="path">Path to load game systems from</param>
        </member>
        <member name="M:SystemManager.DetectGameSystems(System.String)">
            <summary>
            Detect any game systems in the immediate path and any subfolders. This uses I/O to find files.
            </summary>
            <param name="path">Path</param>
            <returns>List of game system file paths</returns>
        </member>
        <member name="M:SystemManager.LoadGameSystems(System.String)">
            <summary>
            Load all game systems at the specified path. This loads any required catalogues too. It automatically gets added to the system manager.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:SystemManager.LoadGameSystem(System.String)">
            <summary>
            Load a single game system at the specified path. This loads any required catalogues too. It automatically gets added to the system manager.
            </summary>
            <param name="path">Path</param>
            <returns>Game system</returns>
        </member>
        <member name="M:SystemManager.HasGameSystems">
            <summary>
            Returns true if any game systems are loaded.
            </summary>
            <returns>True if game systems are loaded</returns>
        </member>
        <member name="M:SystemManager.GetGameSystemGroupById(System.String)">
            <summary>
            Get game system group by the game system id. Can return null if not found.
            </summary>
            <param name="id">Game system id</param>
            <returns>Game system group or null</returns>
        </member>
        <member name="M:SystemManager.GetGameSystemGroupByName(System.String)">
            <summary>
            Get game system group by the game system name. Can return null if not found.
            </summary>
            <param name="name">Game system name</param>
            <returns>Game system group or null</returns>
        </member>
        <member name="M:SystemManager.GetGameSystemById(System.String)">
            <summary>
            Get game system by the game system id. Can return null if not found.
            </summary>
            <param name="id">Game system id</param>
            <returns>Game system or null</returns>
        </member>
        <member name="M:SystemManager.GetGameSystemByName(System.String)">
            <summary>
            Get game system by the game system name. Can return null if not found.
            </summary>
            <param name="name">Game system name</param>
            <returns>Game system or null</returns>
        </member>
        <member name="M:SystemManager.GetGameSystemGroups">
            <summary>
            Get all the game system groups. This list is passed by reference.
            </summary>
            <returns>Game system groups</returns>
        </member>
        <member name="M:SystemManager.GetGameSystems">
            <summary>
            Get all the game systems. This creates a new list every time.
            </summary>
            <returns>List of game systems</returns>
        </member>
        <member name="M:SystemManager.GetCatalogues(Companion.Data.GameSystem)">
            <summary>
            Get a list of catalogues that are loaded for this game system. Returns an empty list if no catalogues are loaded.
            </summary>
            <param name="gameSystem">Game system</param>
            <returns>List of catalogues</returns>
        </member>
        <member name="M:SystemManager.Clear">
            <summary>
            Clear any loaded systems, if async loading is in progress you may want to avoid calling this.
            </summary>
        </member>
        <member name="T:UpdateManager">
            <summary>
            Holds data retrieved from the repositories for updates
            </summary>
        </member>
        <member name="E:UpdateManager.OnDataIndexAdded">
            <summary>
            Fired when data index is received from a repository. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.DataIndexSuccessEventArgs"/>.
            </summary>
        </member>
        <member name="E:UpdateManager.OnDataIndexFailed">
            <summary>
            Fired when it failed to receive the data index from a repository. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.ProcessFailedEventArgs"/>.
            </summary>
        </member>
        <member name="E:UpdateManager.OnRepositoryIndexAdded">
            <summary>
            Fired when repository index is received. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.RepositoryIndexSuccessEventArgs"/>.
            </summary>
        </member>
        <member name="E:UpdateManager.OnRepositoryIndexFailed">
            <summary>
            Fired when it failed to receive the repository index. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.ProcessFailedEventArgs"/>.
            </summary>
        </member>
        <member name="E:UpdateManager.OnUpdateSucceeded">
            <summary>
            Fired when repository update was successful. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.UpdateSuccessEventArgs"/>.
            </summary>
        </member>
        <member name="E:UpdateManager.OnUpdateFailed">
            <summary>
            Fired when it failed to update the repository. Source is <see cref="T:UpdateManager"/>. EventArgs is <see cref="T:Companion.Data.System.Update.ProcessFailedEventArgs"/>.
            </summary>
        </member>
        <member name="F:UpdateManager.loadedRepositories">
            <summary>
            List of loaded repositories.
            </summary>
        </member>
        <member name="M:UpdateManager.RetrieveRepositoryIndex(System.String,System.Boolean)">
            <summary>
            Retrieve the repository index from the source.
            </summary>
            <param name="url">Source url</param>
            <param name="async">Whether request should be done asynchronous</param>
            <returns>Returns true if it was executed</returns>
        </member>
        <member name="M:UpdateManager.RetrieveRepositoryIndex(Companion.Data.System.Update.RepositoryData,System.Boolean)">
            <summary>
            Retrieve the repository index from the source.
            </summary>
            <param name="repositoryData">Repository data which will replace any currently cached data</param>
            <param name="async">Whether request should be done asynchronous</param>
            <returns>Returns true if it was executed</returns>
        </member>
        <member name="M:UpdateManager.RetrieveRepositoryDataIndex(Companion.Data.System.Update.RepositoryData,System.String,System.Boolean)">
            <summary>
            Retrieve the data index for the specified repository.
            </summary>
            <param name="repositoryData">Repository data</param>
            <param name="repositoryName">Repository name</param>
            <param name="async">Whether request should be done asynchronous</param>
            <returns>Returns true if it was executed</returns>
        </member>
        <member name="M:UpdateManager.RetrieveRepositoryDataIndex(Companion.Data.System.Update.RepositoryIndex,Companion.Data.System.Update.Repository,System.Boolean)">
            <summary>
            Retrieve the data index for the specified repository.
            </summary>
            <param name="repositoryIndex">Repository index</param>
            <param name="repository">Repository</param>
            <param name="async">Whether request should be done asynchronous</param>
            <returns>Returns true if it was executed</returns>
        </member>
        <member name="M:UpdateManager.RetrieveRepositoryDataIndex(Companion.Data.System.Update.RepositoryData,Companion.Data.System.Update.Repository,System.Boolean)">
            <summary>
            Retrieve the data index for the specified repository.
            </summary>
            <param name="repositoryData">Repository data</param>
            <param name="repository">Repository</param>
            <param name="async">Whether request should be done asynchronous</param>
            <returns>Returns true if it was executed</returns>
        </member>
        <member name="M:UpdateManager.UpdateFromRepository(Companion.Data.System.Update.RepositoryData,Companion.Data.System.Update.Repository,System.String,System.Boolean)">
            <summary>
            Update from a repository.
            </summary>
            <param name="repositoryData">Repository state data</param>
            <param name="repository">Repository to update</param>
            <param name="dataPath">Where to save the repository on disk</param>
            <param name="async">If true this completes async</param>
            <returns>RepositoryUpdate object or null if unable to update</returns>
        </member>
        <member name="M:UpdateManager.GetRepositoryDataByUrl(System.String)">
            <summary>
            Get the existing repository data by the url if it exists.
            </summary>
            <param name="url">Repository url</param>
            <returns>Repository data or null if not found</returns>
        </member>
        <member name="M:UpdateManager.AddRepositoryData(Companion.Data.System.Update.RepositoryData)">
            <summary>
            Replaces any existing repository data with the new data or just adds it if no existing data is loaded.
            </summary>
            <param name="repositoryData">Repository data</param>
        </member>
        <member name="M:UpdateManager.AddRepositoryData(System.String)">
            <summary>
            Adds the repository url to the update manager or returns the existing repository data.
            </summary>
            <param name="repositoryUrl">Repository url</param>
            <returns>Repository data</returns>
        </member>
    </members>
</doc>
